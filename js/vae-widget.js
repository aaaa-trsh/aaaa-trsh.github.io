const size = 64;
const scale = 1;
const vaeCanvas = document.getElementById("vae-output-canvas");
vaeCanvas.width = size * scale;
vaeCanvas.height = size * scale;
const vaeCTX = vaeCanvas.getContext('2d');
var decoder;
const sliderCount = 10;
const mean =[-0.465, 0.144, -0.205, 0.027, -0.511, -0.034, 0.053, -0.248, -0.039, 0.163]

const std = [0.92, 0.997, 0.933, 1.028, 0.938, 0.928, 0.934, 1.09, 0.975, 1.032]
const preloadDense = [
    [-0.4,-1.453,-0.973,1.326,-0.041,-0.849,0.279,-1.779,-0.965,-0.627],
    [-1.168,0.75,0.283,2.372,-1.101,-1.087,1.103,-1.744,-0.493,0.642],
    [-1.452,0.023,0.016,0.507,-1.482,-0.198,-1.411,0.358,0.788,-0.378],
    [-1.353,-0.015,-0.721,1.264,0.35,-0.477,1.526,-0.238,0.983,-1.296],
    [-0.964,-2.243,-2.207,0.288,-1.061,0.154,0.94,0.814,0.935,-0.795],
    [0.176,0.329,-1.471,0.896,-1.614,0.371,-0.092,1.15,0.714,2.089],
    [-1.367,-0.669,0.206,-0.048,-0.765,-0.74,-0.255,-0.84,0.231,0.463],
    [-1.136,-0.511,-0.02,-0.132,0.182,0.349,-0.306,-1.343,0.218,0.568],
    [0.171,-0.822,-2.349,-0.368,0.376,0.368,0.538,-0.539,0.27,-1.086],
    [-1.633,-0.309,1.473,-2.264,0.626,0.599,1.476,1.263,0.859,-0.552],
    [-0.552,0.771,-0.82,-1.004,-1.379,0.185,-0.798,-2.116,-2.849,-0.126],
    [1.711,-0.586,-0.619,-0.496,-0.895,-0.397,0.07,-0.446,-0.404,2.283],
    [-1.266,0.694,0.126,0.411,0.2,-0.846,-0.831,0.852,1.05,-0.202],
    [-0.112,0.042,-0.921,-0.224,0.094,-0.998,0.772,-1.912,0.015,-1.796],
    [-0.159,-0.666,-1.195,0.256,0.197,-0.512,0.924,-1.963,-0.112,-0.719],
    [-1.096,-0.385,0.305,-0.566,-0.322,-0.33,-0.178,-1.606,0.219,0.926],
    [-2.691,-1.077,-0.108,-1.449,0.914,-0.593,-1.219,0.612,-1.917,1.359],
    [-2.121,-0.891,-0.269,0.293,0.472,-0.349,0.478,-2.291,-0.077,-0.079],
    [-0.243,-1.632,-1.166,-0.579,-0.442,-1.373,1.657,1.287,-0.71,-1.849],
    [1.06,-1.606,1.114,-0.499,-0.884,-1.258,-0.306,-0.906,-0.374,1.073],
    [-2.292,0.57,1.142,-1.645,1.001,0.702,1.654,1.295,-0.606,-0.275],
    [-0.565,0.641,-0.055,-0.629,-0.13,0.578,0.974,-1.183,0.139,-1.14],
    [0.856,1.39,-0.328,-1.451,-0.783,-0.319,-1.456,1.388,-0.905,-2.504],
    [-1.27,0.371,-0.316,0.736,-0.674,-0.599,-0.652,1.123,0.904,-0.504],
    [-1.922,-1.328,-0.951,-1.451,0.736,-0.934,1.424,0.427,-0.907,-0.834],
    [-1.221,1.255,1.799,0.692,-0.671,-1.119,-0.147,1.903,1.255,-0.034],
    [-2.476,-0.713,-0.068,1.699,-0.402,-1.39,0.188,0.157,1.078,-0.225],
    [0.864,0.018,0.702,1.209,-0.258,-0.694,1.404,2.045,-1.861,-0.042],
    [-0.983,1.425,0.307,-2.487,0.802,-0.634,-1.312,0.72,-1.022,-0.604],
    [-1.221,1.255,1.799,0.692,-0.671,-1.119,-0.147,1.903,1.255,-0.034],
    [-0.545,-0.68,0.358,-1.237,-0.473,-0.259,-0.228,-1.005,0.205,0.52],
    [-0.733,-1.134,0.072,0.161,-0.021,-0.11,-1.218,-0.45,0.226,0.201],
    [-0.771,-1.979,-0.9,0.442,-1.351,0.368,-0.409,0.955,-0.163,-0.762],
    [-0.043,0.175,-0.501,0.411,0.964,1.207,0.382,-0.644,0.513,1.617],
    [-1.834,-0.472,0.913,-0.242,0.691,-0.225,0.232,-1.196,0.822,-0.738],
    [-0.027,-1.199,-1.563,0.371,0.991,-1.855,1.569,1.129,-2.112,0.748],
    [0.503,-0.08,0.327,1.394,-1.435,0.531,-2.093,-0.691,-0.107,1.627],
    [-2.734,0.448,-1.303,1.305,1.546,-1.879,1.659,-0.553,0.991,0.461],
    [1.029,-0.479,-0.71,-0.873,0.816,-0.149,-0.451,-2.112,-2.344,-0.294],
    [-0.416,1.0,-2.034,-0.635,0.387,-0.19,0.935,-0.352,-1.562,-1.149],
    [-1.024,-0.577,0.833,0.876,-0.442,-0.58,-0.441,0.359,0.447,-0.449],
    [-0.759,0.008,-0.618,-0.112,0.564,-0.285,-0.223,-0.522,-0.332,2.374],
    [-0.307,2.367,-0.025,0.13,-0.714,0.646,0.976,-1.845,-0.292,-0.386],
    [-1.067,-0.334,-1.09,1.654,-0.616,0.844,2.243,0.441,-0.776,1.793],
    [-1.392,-0.832,-0.147,1.506,-1.485,-0.214,-0.541,-0.512,-0.279,-0.561],
    [-0.329,-1.288,0.531,0.518,-0.758,-0.058,-0.483,-0.468,-0.077,-0.81],
    [-1.363,0.097,0.365,0.329,-0.113,0.009,0.155,0.616,0.003,-1.244],
    [-1.499,-0.681,1.625,0.07,-0.263,-0.421,1.379,0.004,-2.752,-0.143],
    [0.221,0.813,0.057,-1.056,-0.163,-0.373,-0.297,-0.902,-0.89,1.887],
    [0.96,0.036,-1.522,0.862,0.254,0.882,1.532,1.809,0.912,1.733],
    [-1.389,0.699,-1.004,-2.096,1.441,-0.121,-0.473,1.207,-0.257,-0.647],
    [-1.268,0.754,-1.022,0.748,-0.523,-0.146,-0.332,-2.806,1.641,-0.371],
    [-0.791,0.681,0.097,-0.466,-1.894,0.047,-1.236,0.113,0.54,-1.577],
    [-1.181,-1.034,-1.178,0.226,-1.226,-1.635,-0.581,2.838,-2.663,1.239],
    [0.105,-0.277,-0.866,0.791,-1.264,0.204,0.825,0.473,0.138,-1.08],
    [0.544,0.976,-0.202,-0.856,0.597,-0.02,0.691,-0.957,-0.324,1.786],
    [0.397,2.186,-1.889,0.552,0.4,-0.144,0.96,-0.65,0.226,0.782],
    [-0.71,1.328,1.482,-0.55,-0.036,1.318,1.544,-0.755,0.577,0.139],
    [-1.338,-0.214,0.303,-2.749,-0.082,-0.206,-0.712,0.31,-0.379,-0.995],
    [-0.774,-0.695,1.076,-0.512,-0.892,0.753,-0.799,-0.645,0.66,2.073],
    [-0.475,-0.281,-1.492,-1.027,-0.491,1.345,1.242,-0.391,1.632,-0.023],
    [-0.951,-0.242,-0.105,0.829,-1.919,0.147,-0.188,0.023,0.361,-1.737],
    [-0.278,-1.166,-0.231,1.213,-0.93,0.755,0.733,-0.314,0.663,-1.096],
    [-1.668,0.664,0.549,-1.743,0.594,-0.243,2.027,-0.479,-1.597,-1.552],
    [-1.794,-1.376,-0.069,-1.016,0.114,2.165,-0.776,-0.761,0.832,1.598],
    [-0.778,-0.797,-3.331,-1.381,-0.396,0.963,0.231,-1.018,-0.456,-1.011],
    [-2.129,1.456,-0.53,-0.791,-0.646,1.208,2.575,1.863,0.058,0.424],
    [-1.033,0.336,-2.004,-1.141,-1.263,-0.789,2.649,-0.133,-1.374,0.001],
    [-0.101,1.28,-1.785,0.274,-2.307,0.981,0.446,0.146,-0.145,1.376],
    [-1.7,-0.669,0.43,0.705,-0.117,1.054,-1.632,-0.069,0.579,-0.716],
    [-0.475,1.656,-1.872,-0.593,0.601,-1.933,0.482,0.267,0.556,0.804],
    [-1.575,-0.148,-0.956,2.166,-1.541,0.063,1.261,-0.724,-1.583,1.238],
    [-0.565,1.55,0.863,-0.243,0.425,0.59,1.568,2.168,-0.146,0.65],
    [-1.174,-0.818,-0.629,-0.72,-0.064,1.513,-0.051,-0.681,0.038,-0.59],
    [-0.837,0.988,0.455,1.961,-1.294,-0.976,1.16,0.517,-0.284,0.749],
    [0.276,0.734,0.367,-1.037,0.155,-1.267,-0.346,-0.319,-0.13,1.306],
    [0.257,0.165,1.138,0.42,0.461,-0.425,-0.106,0.692,0.237,-0.907],
    [-0.714,0.846,-0.23,1.225,-0.796,-2.135,-0.485,0.785,0.286,0.078],
    [-0.701,-2.081,2.573,-0.514,0.345,-0.733,-0.66,0.971,-0.714,3.459],
    [0.632,1.639,-0.496,0.114,-2.191,1.487,-1.681,-1.099,0.631,-0.667],
    [-1.183,-1.189,-0.635,0.26,-0.137,0.46,-0.475,-1.485,-0.226,0.507],
    [0.517,0.486,-3.312,0.288,0.725,-0.66,1.048,-0.675,-0.397,1.846],
    [-0.167,-0.587,-0.107,-0.97,-0.458,0.244,0.746,-0.859,0.14,0.339],
    [-0.939,-0.505,0.662,-0.836,1.441,0.725,2.627,-1.282,-0.401,-1.44],
    [-1.402,0.12,-0.49,0.671,-0.362,-1.085,0.147,0.376,1.414,-0.315],
    [1.714,1.096,-1.353,-0.244,0.802,0.304,0.98,-0.764,-0.484,0.491],
    [-0.701,-2.081,2.573,-0.514,0.345,-0.733,-0.66,0.971,-0.714,3.459],
    [-1.472,0.471,-0.736,-0.123,1.441,1.286,2.454,-0.313,0.571,0.275],
    [-1.417,-0.242,0.254,0.029,-1.871,-0.835,0.162,0.13,0.102,-0.817],
    [-1.317,1.252,-0.515,-1.239,-0.515,0.055,0.772,-0.982,0.298,-1.324],
    [-2.403,-1.588,-1.023,-1.194,0.463,1.268,1.062,0.217,0.137,-0.27],
    [1.308,-0.075,-1.438,0.768,-1.422,-0.911,1.545,1.792,0.927,0.522],
    [-1.723,1.108,-0.031,0.856,-1.488,1.386,1.283,-0.571,0.198,1.57],
    [-0.443,-0.783,-0.26,2.271,-0.271,-0.859,-0.221,0.256,0.744,-0.811],
    [-0.532,-0.685,-1.566,-1.566,-1.193,2.053,1.902,0.535,1.35,-0.729],
    [0.082,-0.52,-0.81,1.958,-0.683,1.604,1.821,1.108,0.242,0.935],
    [-0.489,-0.956,-0.244,-0.843,1.176,0.031,0.394,-1.014,-0.428,0.021],
    [-0.59,1.588,1.5,0.373,0.252,0.294,0.002,1.387,0.461,0.811],
    [0.676,-1.745,0.004,0.707,-1.122,-0.403,0.569,-1.371,-3.173,0.551],
    [-1.135,-0.476,-0.428,0.667,0.62,1.525,-0.182,-1.665,-0.249,-0.512],
]
let sliders = [];
let saved = [[new Array(sliderCount).fill(-1)], [new Array(sliderCount).fill(1)]];
async function loadModel() {
    decoder = await tf.loadLayersModel('./models/faces/decoder/model.json');
    console.log("Model Loaded");

    let sliderContainer = document.querySelector(".vae-widget-leftbar-pca-container");
    for (var i = 0; i < sliderCount; i++) {
        var div = document.createElement('div');
        div.innerHTML = `<input id="pca${i+1}" class="vae-widget-pca" type="range" min="${mean[i]-std[i]}" max="${mean[i]+std[i]}" step="0.05" oninput="decodeCurrent()" />`;
        let newSlider = sliderContainer.appendChild(div.children[0]);
        newSlider.value = mean[i];
    }

    let gridContainer = document.querySelector(".vae-widget-rightbar-grid-container");
    for (var i = 0; i < preloadDense.length; i++) {
        var img = document.createElement('img');
        img.setAttribute('src', `./assets/imgs/projects/faces/${i}.png`)
        img.setAttribute('preset-id', i)
        img.onclick = function () {
            // selectedDense = preloadDense[i];
            id = parseInt(this.getAttribute("preset-id"))
            // console.log(id, preloadDense[id])
            sliders.forEach((elem, k) => {
                elem.value = preloadDense[id][k];
            });
            setTimeout(tf.tidy(()=>{
                decodeCurrent()
            }), 10);
        }
        gridContainer.appendChild(img)
    }
    
    sliders = [...document.getElementsByClassName("vae-widget-pca")]
    setTimeout(tf.tidy(()=>{
        decodeCurrent()
    }), 10);
}
window.addEventListener('mousemove', (e) => { 
    mx = (-e.clientX + window.innerWidth/2)/window.innerWidth;
    my = (-e.clientY + window.innerHeight/2)/window.innerHeight; 
});

// loadModel();
var startTimeInMs = Date.now();
(function loopSearch() {
    if (document.querySelector("script[src='./js/tf.js']") != null)
        setTimeout(function () {
            loadModel();
        }, 100);
    else {
        setTimeout(function () {
            loopSearch();
        }, 100);
    }
})();

function drawFromRGB_imdata(arr) {

    arr = arr[0]

    var imgData = vaeCTX.createImageData(size * scale, size * scale);
    for (var y = 0; y < size * scale; y+=scale)
    {
        for (var x = 0; x < size * scale; x+=scale)
        {
            var pixX = Math.round(x/scale)
            var pixY = Math.round(y/scale)
            for (var oy = 0; oy < scale; oy++) {
                for (var ox = 0; ox < scale; ox++) {
                    imgData.data[(((y+oy)*scale * size) + x + ox)*4+0] = (arr[pixY][pixX][0] + 1.9) * 65
                    imgData.data[(((y+oy)*scale * size) + x + ox)*4+1] = (arr[pixY][pixX][1] + 1.9) * 65
                    imgData.data[(((y+oy)*scale * size) + x + ox)*4+2] = (arr[pixY][pixX][2] + 1.9) * 65
                    imgData.data[(((y+oy)*scale * size) + x + ox)*4+3] = 255
                }
            }
        }
    }

    vaeCTX.putImageData(imgData, 0, 0)                
}

async function decode(dense) {
    if (decoder !== undefined) {
        var rgb = await decoder.predict(tf.tensor([dense])).array();
        drawFromRGB_imdata(rgb);
    }
}

// let lastDecodeTimestamp = 0;
function decodeCurrent() {
    // let pre = lastDecodeTimestamp
    // lastDecodeTimestamp = new Date().getMilliseconds()
    // if (new Date().getMilliseconds() - lastDecodeTimestamp > 100)
    //     return
    // console.log(new Date().getMilliseconds() - pre)
    setTimeout(tf.tidy(()=>{
        decode(sliders.map(elem => parseFloat(elem.value)))
    }), 4)
}

function save(index) {
    saved[index] = sliders.map(elem => {return elem != null? parseFloat(elem.value) : 0;});
    var dataURL = vaeCanvas.toDataURL();
    document.getElementsByClassName("vae-widget-mix-preset")[index].src = dataURL;
}

function load(index) {
    sliders.forEach((elem, i) => {
        elem.value = saved[index][i];
    });
    decodeCurrent();
}


function mix(t) {
    t/=100
    sliders.forEach((elem, i) => {
        a = saved[0][i];
        b = saved[1][i];
        elem.value = a * t + b * (1 - t);
    });
    decodeCurrent();
}